---

name: CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 4 * * 0'

jobs:
  yaml_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running YAMLlint
        uses: "docker://pipelinecomponents/yamllint:latest"
        with:
          args: yamllint .
  remark_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running Remark lint
        uses: "docker://pipelinecomponents/remark-lint:latest"
        continue-on-error: true
        with:
          args: "remark --no-stdout --color --frail --use preset-lint-recommended ."
  ansible_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2
      - name: Lint Ansible Role
        # replace "master" with any valid ref
        uses: ansible/ansible-lint-action@master
  black:
    name: Check Py formatting with Black
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running Black Check
        uses: lgeiger/black-action@master
        with:
          args: ". --check"
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [yaml_lint, remark_lint, ansible_lint, black]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: ".github/workflows/configs/configuration.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      - name: Get the version from the tag
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//
      - name: Injecting a dynamic Collection version
        uses: artis3n/ansible_galaxy_collection@v2
        with:
          galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}
          galaxy_version: ${{ env.RELEASE_VERSION }}
