name: release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  yaml_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running YAMLlint
        uses: "docker://pipelinecomponents/yamllint:latest"
        with:
          args: yamllint .
  remark_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running Remark lint
        uses: "docker://pipelinecomponents/remark-lint:latest"
        continue-on-error: true
        with:
          args: "remark --no-stdout --color --frail --use preset-lint-recommended ."
  ansible_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2
      - name: Lint Ansible Role
        # replace "master" with any valid ref
        uses: ansible/ansible-lint-action@main
  black:
    name: Check Py formatting with Black
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running Black Check
        uses: lgeiger/black-action@master
        with:
          args: ". --check"

  release:
    name: Create release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [yaml_lint, remark_lint, ansible_lint, black]
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2
      - name: 🛎️ Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: ${{ contains(needs.tag_version.outputs.tag, '-rc*') || contains(needs.tag_version.outputs.tag, '-b*') || contains(needs.tag_version.outputs.tag, '-a*') }}
      - name: 🏷️ Update latest tag
        uses: EndBug/latest-tag@latest
      - name:  get version
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Injecting a dynamic Collection version
        uses: artis3n/ansible_galaxy_collection@v2
        with:
          api_key: ${{ secrets.GALAXY_API_KEY }}
          galaxy_version: ${{ env.RELEASE_VERSION }}
